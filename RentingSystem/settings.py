"""
Django settings for RentingSystem project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vkwdn)%#ffl%go$&b+os1^!5o(v077%9sx*#b)pc7cp1$9%)zo'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CORS_ALLOW_ALL_ORIGINS = True  # Warning: This is not recommended for production use



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    
    'accounts',
    'apartments',
    'drf_spectacular',
    'django_filters',
    'modeltranslation',
    
]





# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
# }



REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        
        
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',

    ],
    
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5,  # Define how many items per page
    
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    #Multi-Language Support
    'django.middleware.locale.LocaleMiddleware',
    
    
    

    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    

    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',


]

ROOT_URLCONF = 'RentingSystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'RentingSystem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# SPECTACULAR_SETTINGS = {
#     'TITLE': 'Renting System API',
#     'DESCRIPTION': 'Renting System API Description',
#     'VERSION': '1.0.0',
#     # Define security schemes globally
#     'SECURITY': [
#         {'bearerAuth': []},  # This defines the scheme used in Swagger UI
#     ],
#     'COMPONENTS': {
#         'SECURITY_SCHEMES': {
#             'bearerAuth': {  # This name must match the key in 'SECURITY'
#                 'type': 'http',
#                 'scheme': 'bearer',
#                 'bearerFormat': 'JWT',  # Optional, describes the format of the token you're using
#             },
#         },
#     },
# }


SPECTACULAR_SETTINGS = {
    'TITLE': 'Renting System API',
    'DESCRIPTION': 'Renting System API Description',
    'VERSION': '1.0.0',
    # Define security schemes globally
    'SECURITY': [
        {'TokenAuth': []},  # Use 'TokenAuth' or another name that you prefer
    ],
    'COMPONENTS': {
        'SECURITY_SCHEMES': {
            'TokenAuth': {  # This name must match the key in 'SECURITY'
                'type': 'apiKey',
                'in': 'header',  # The token is passed in the header
                'name': 'Authorization',  # Name of the header, Django uses 'Authorization'
                'description': 'Token-based authentication with required prefix "Token "',  # Optional description
            },
        },
    },
}







# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# EMAIL_HOST = 'smtp.mail.yahoo.com'
# EMAIL_PORT = 465

# EMAIL_HOST_USER = 'xolama2934@haislot.com'
# EMAIL_HOST_PASSWORD = 'Sxur-x9V6NY3AKu'
# EMAIL_USE_TLS = True
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.titan.email'
EMAIL_PORT = 587

EMAIL_HOST_USER = 'password-reset@tradingbots.shop'
EMAIL_HOST_PASSWORD = '|%|T8D:F%X=L?Y,'
# EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Specific email for no-reply purposes (e.g., apartment approvals)
NO_REPLY_EMAIL_HOST_USER = 'no-reply@tradingbots.shop'
NO_REPLY_EMAIL_HOST_PASSWORD = '|%|T8D:F%X=L?Y'






# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/


TIME_ZONE = 'Africa/Cairo'



USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = 'accounts.CustomUser'

APPEND_SLASH=False

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


from django.utils.translation import gettext_lazy as _

# Localization and internationalization settings
USE_I18N = True
USE_L10N = True

LANGUAGE_CODE = 'en-us'

LANGUAGES = [
    ('en', 'English'),
    ('ar', 'Arabic'),
    # Add other languages you want to support.
]

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)
